services:
  backend:
    build:
      dockerfile: Backend.Dockerfile
    image: backend:test
    container_name: backend
    ports:
      - 9000:9000
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/${PG_MEDUSA_DB_NAME}
      REDIS_URL: redis://cache
      NODE_ENV: production
      JWT_SECRET: some_jwt_secret
      COOKIE_SECRET: some_cookie_secret
      PORT: 9000
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM: ${SENDGRID_FROM}
      SENDGRID_ORDER_PLACED_ID: ${SENDGRID_ORDER_PLACED_ID}


  postgres:
    image: postgres:15.7
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ${PG_MEDUSA_DB_NAME}

  redis:
    image: redis
    container_name: cache
    ports:
      - 6379:6379

  admin:
    build:
      dockerfile: Admin.Dockerfile
    image: admin:test
    container_name: medusa-admin
    ports:
      - 7001:9000
    depends_on:
      - backend
      - postgres
      - redis
    environment:
      NODE_OPTIONS: --openssl-legacy-provider 
      REDIS_URL: redis://cache
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/${PG_MEDUSA_DB_NAME} # Not sure if this is needed for the Admin UI?
      GCS_CLIENT_EMAIL: ${GCS_CLIENT_EMAIL}
      GCS_SA_PRIVATE_KEY: ${GCS_SA_PRIVATE_KEY}
      GCS_PUBLIC_BUCKET_NAME: ${GCS_PUBLIC_BUCKET_NAME}
      GCS_BASE_PUBLIC_URL: https://storage.googleapis.com/${GCS_PUBLIC_BUCKET_NAME}/